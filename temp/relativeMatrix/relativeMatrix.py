
# Form implementation generated from reading ui file 'relativeMatrix.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PySide2 import QtCore, QtGui, QtWidgets
from PySide2 import shiboken2
from pymxs import runtime as rt

OffsetData = []
ParentObjName = ""

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self,parent=None):
        super(Ui_MainWindow, self).__init__(parent)
        self.setupUi(self)
        self.creat_contion()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(350, 120)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setSpacing(10)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Btn_SaveOffset = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Btn_SaveOffset.sizePolicy().hasHeightForWidth())
        self.Btn_SaveOffset.setSizePolicy(sizePolicy)
        self.Btn_SaveOffset.setObjectName("Btn_SaveOffset")
        self.horizontalLayout.addWidget(self.Btn_SaveOffset)
        self.Btn_PastOffset = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Btn_PastOffset.sizePolicy().hasHeightForWidth())
        self.Btn_PastOffset.setSizePolicy(sizePolicy)
        self.Btn_PastOffset.setObjectName("Btn_PastOffset")
        self.horizontalLayout.addWidget(self.Btn_PastOffset)
        self.verticalLayout.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "偏移工具"))
        self.label.setText(_translate("MainWindow", "偏移工具"))
        self.Btn_SaveOffset.setText(_translate("MainWindow", "记录偏移"))
        self.Btn_PastOffset.setText(_translate("MainWindow", "粘贴偏移"))

    def creat_contion(self):
        """
        创建连接
        :return:
        """
        self.Btn_SaveOffset.clicked.connect(self.SaveOffset)
        self.Btn_PastOffset.clicked.connect(self.PastOffset)

    def ls(self):
        allobj = []
        objs = rt.selection
        for obj in objs:
            allobj.append(obj)
        return allobj

    def SaveOffset(self):
        global OffsetData
        global ParentObjName
        OffsetData = []
        selectobjs = self.ls()
        if len(selectobjs)>=2:
            parentobj = selectobjs[0]
            ParentObjName = parentobj.name
            for obj in selectobjs:
                if obj.name == ParentObjName:
                    pass
                else:
                    data = {}
                    offsetmatrix = self.getOffsetMatrix(parentobj.transform,obj.transform)
                    data["objname"] = obj.name
                    data["objoffsetmatrix"] = offsetmatrix
                    OffsetData.append(data)
        else:
            #提示选择两个物体
            pass

    def PastOffset(self):
        global OffsetData
        global ParentObjName
        selectobjs = self.ls()
        parentobj = rt.getNodeByName(ParentObjName)
        for data in OffsetData:
            obj = rt.getNodeByName(data.get('objname'))
            if obj in selectobjs:
                offsetmatrix = data.get("objoffsetmatrix")
                obj.transform = offsetmatrix * parentobj.transform
        rt.redrawViews()


    def getOffsetMatrix(self,Pmat, Cmat):
        Pmat = Pmat
        Cmat = Cmat
        offsetMatrix = rt.inverse(Pmat * rt.inverse(Cmat))
        # localMatrix = rt.inverse(Nmat)*Pmat
        return offsetMatrix

def main():
    # rt.resetMaxFile(rt.name('noPrompt'))
    # Cast the main window HWND to a QMainWindow for docking
    # First, get the QWidget corresponding to the Max windows HWND:
    main_window_qwdgt = QtWidgets.QWidget.find(rt.windows.getMAXHWND())
    # Then cast it as a QMainWindow for docking purposes:
    main_window = shiboken2.wrapInstance(shiboken2.getCppPointer(main_window_qwdgt)[0], QtWidgets.QMainWindow)

    window = Ui_MainWindow(main_window)
    # window = MainWindow()
    window.show()

main()