

# Form implementation generated from reading ui file 'PropSpaceSwitch.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PySide2 import QtCore, QtGui, QtWidgets
from PySide2 import shiboken2
from pymxs import runtime as rt

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self,parent=None):
        super(Ui_MainWindow, self).__init__(parent)
        self.setupUi(self)
        self.creat_contion()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(430, 180)
        MainWindow.setMinimumSize(QtCore.QSize(330, 180))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setRowWrapPolicy(QtWidgets.QFormLayout.WrapLongRows)
        self.formLayout.setObjectName("formLayout")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setObjectName("lineEdit")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.lineEdit)
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setObjectName("label")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label)
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setObjectName("label_2")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_2)
        self.comboBox_pos = QtWidgets.QComboBox(self.frame)
        self.comboBox_pos.setObjectName("comboBox_pos")
        self.comboBox_pos.addItem("")
        self.comboBox_pos.addItem("")
        self.comboBox_pos.addItem("")
        self.comboBox_pos.addItem("")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.comboBox_pos)
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setObjectName("label_3")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_3)
        self.comboBox_rot = QtWidgets.QComboBox(self.frame)
        self.comboBox_rot.setObjectName("comboBox_rot")
        self.comboBox_rot.addItem("")
        self.comboBox_rot.addItem("")
        self.comboBox_rot.addItem("")
        self.comboBox_rot.addItem("")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.comboBox_rot)
        self.verticalLayout_2.addLayout(self.formLayout)
        self.Btn_Apply = QtWidgets.QPushButton(self.frame)
        self.Btn_Apply.setMinimumSize(QtCore.QSize(0, 23))
        self.Btn_Apply.setObjectName("Btn_Apply")
        self.verticalLayout_2.addWidget(self.Btn_Apply)
        self.verticalLayout.addWidget(self.frame)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PropSpaceSwitch"))
        self.lineEdit.setText(_translate("MainWindow", "Bip001 Prop1"))
        self.label.setText(_translate("MainWindow", "PropName:"))
        self.label_2.setText(_translate("MainWindow", "PosSpace:"))
        self.comboBox_pos.setItemText(0, _translate("MainWindow", "World"))
        self.comboBox_pos.setItemText(1, _translate("MainWindow", "Body"))
        self.comboBox_pos.setItemText(2, _translate("MainWindow", "Right Hand"))
        self.comboBox_pos.setItemText(3, _translate("MainWindow", "Left Hand"))
        self.label_3.setText(_translate("MainWindow", "RotSpace: "))
        self.comboBox_rot.setItemText(0, _translate("MainWindow", "World"))
        self.comboBox_rot.setItemText(1, _translate("MainWindow", "Body"))
        self.comboBox_rot.setItemText(2, _translate("MainWindow", "Right Hand"))
        self.comboBox_rot.setItemText(3, _translate("MainWindow", "Left Hand"))
        self.Btn_Apply.setText(_translate("MainWindow", "Apply"))

    def creat_contion(self):
        """
        创建连接
        :return:
        """
        self.Btn_Apply.clicked.connect(self.Apply)

    def Apply(self):
        propobjName = self.lineEdit.text()
        propobj = rt.getNodeByName(propobjName)
        Pspace = self.comboBox_pos.currentIndex()
        Rspace = self.comboBox_rot.currentIndex()

        if propobj:
            objkeys = propobj.controller.keys
            if objkeys != []:
                self.propSpace(propobj,Pspace=Pspace,Rspace=Rspace)
        pass

    def propSpace(self,propobj, Pspace=0, Rspace=0):
        objkeys = propobj.controller.keys
        count = 1
        rt.disableSceneRedraw()
        with pymxs.undo(True):
            for key in objkeys:
                propkey = rt.biped.getKey(propobj.controller, count)
                # selkey = rt.biped.getKey(secsub.controller)
                if propkey.selected == True:
                    with pymxs.animate(True):
                        rt.sliderTime = propkey.time
                        objstransform = propobj.transform
                        with pymxs.attime(propkey.time):
                            propkey.posSpace = Pspace
                            propkey.rotSpace = Rspace
                            propobj.transform = objstransform

                else:
                    pass
                count += 1
        rt.enableSceneRedraw()


def main():
    # rt.resetMaxFile(rt.name('noPrompt'))
    # Cast the main window HWND to a QMainWindow for docking
    # First, get the QWidget corresponding to the Max windows HWND:
    main_window_qwdgt = QtWidgets.QWidget.find(rt.windows.getMAXHWND())
    # Then cast it as a QMainWindow for docking purposes:
    main_window = shiboken2.wrapInstance(shiboken2.getCppPointer(main_window_qwdgt)[0], QtWidgets.QMainWindow)

    window = Ui_MainWindow(main_window)
    # window = MainWindow()
    window.show()

main()