
# Form implementation generated from reading ui file 'cv_smooth.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PySide2 import QtCore, QtGui, QtWidgets
from PySide2 import shiboken2
from pymxs import runtime as rt
import pymxs

class PyMaxDockWidget(QtWidgets.QDockWidget):
    def __init__(self, parent=None):
        super(PyMaxDockWidget, self).__init__(parent)
        self.setWindowFlags(QtCore.Qt.Tool)
        # self.setWindowTitle('Pyside Qt  Dock Window')
        self.setupUi(self)
        self.creat_contion()

    def setupUi(self, Frame):
        Frame.setObjectName("Frame")
        Frame.resize(276, 78)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(Frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalSlider = QtWidgets.QSlider(Frame)
        self.horizontalSlider.setPageStep(1)
        self.horizontalSlider.setProperty("value", 20)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.verticalLayout.addWidget(self.horizontalSlider)
        self.pushButton = QtWidgets.QPushButton(Frame)
        self.pushButton.setStyleSheet("QPushButton {\n"
"    background-color:rgb(40, 105, 254);\n"
"    color: rgb(255, 255, 255);\n"
"    border-width: 0px;\n"
"    border-radius: 3px;\n"
"    border-color: beige;\n"
"    padding: 2px;\n"
"\n"
"}\n"
"QPushButton:hover {\n"
"    background-color:rgb(14, 59, 229);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 33, 154);\n"
"    border-style: inset;\n"
"}\n"
"\n"
"\n"
"")
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.verticalLayout_2.addLayout(self.verticalLayout)


        #--------------------------------------

        self.pushButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.horizontalSlider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.verticalLayout.setSpacing(15)
        widget = QtWidgets.QWidget()
        widget.setLayout(self.verticalLayout_2)
        self.setWidget(widget)
        # self.resize(250, 100)
        #-----------------------------------------------
        self.retranslateUi(Frame)
        QtCore.QMetaObject.connectSlotsByName(Frame)

    def retranslateUi(self, Frame):
        _translate = QtCore.QCoreApplication.translate
        Frame.setWindowTitle(_translate("Frame", "曲线平滑"))
        self.pushButton.setText(_translate("Frame", "smooth"))

    def creat_contion(self):
        self.pushButton.clicked.connect(self.Apply_smooth)

    def Apply_smooth(self):
        #获取滑块数值

        #获取key_value的开始帧值和结束帧值
        #
        print("smooth")

def main():


    #rt.resetMaxFile(rt.name('noPrompt'))
    # Cast the main window HWND to a QMainWindow for docking
    # First, get the QWidget corresponding to the Max windows HWND:
    main_window_qwdgt = QtWidgets.QWidget.find(rt.windows.getMAXHWND())
    # Then cast it as a QMainWindow for docking purposes:
    main_window = shiboken2.wrapInstance(shiboken2.getCppPointer(main_window_qwdgt)[0], QtWidgets.QMainWindow)
    w = PyMaxDockWidget(parent=main_window)
    w.setFloating(True)
    w.show()

if __name__ == "__main__":
    main()